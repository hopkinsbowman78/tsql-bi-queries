--1. Find donors who have made orders and participated in more than 3 events
SELECT DISTINCT c.Firstname, c.LastName, c.Email, c.EventParticipationCount
FROM CRM_Dataset c
JOIN ProductOrders p ON c.DonorID = p.DonorID
WHERE c.EventParticipationCount > 3;



--2. Calculate total revenue generated by each donor (donations + product orders)
SELECT
	c.DonorID,
	c.FirstName,
	c.LastName,
	SUM(c.DonationAmount + ISNULL(p.TotalAmount, 0)) AS TotalRevenue
FROM CRM_Dataset c
LEFT JOIN ProductOrders p ON c.DonorID = p.DonorID
GROUP BY c.DonorID, c.FirstName, c.LastName
ORDER BY TotalRevenue DESC;



--3. List the top 5 donors by total donations
SELECT TOP 5
	DonorID,
	FirstName,
	LastName,
	SUM(DonationAmount) AS TotalDonations
FROM CRM_Dataset
GROUP BY DonorID, FirstName, LastName
ORDER BY TotalDonations DESC;



--4. Find the most popular product and the total quantity sold
SELECT TOP 1
	Product,
	SUM(Quantity) AS TotalQuantitySold
FROM ProductOrders
GROUP BY Product
ORDER BY TotalQuantitySold DESC;



--5. Get a list of donors who have never placed an order
SELECT
	DonorID,
	FirstName,
	LastName
FROM CRM_Dataset
WHERE DonorID NOT IN (SELECT DISTINCT DonorID FROM ProductOrders);



--6. Analyze average donation amount by membership status and region
SELECT
	MembershipStatus,
	Region,
	AVG(DonationAmount) AS AverageDonation
FROM CRM_Dataset
GROUP BY MembershipStatus, Region
ORDER BY MembershipStatus, Region;



--7. Find donors who have spent more than $200 on orders in the last year
SELECT
	c.DonorID, 
	c.FirstName, 
	SUM(p.TotalAmount) AS TotalOrderAmount
FROM CRM_Dataset c
JOIN ProductOrders p ON c.DonorId = p.DonorID
WHERE p.OrderDate >= DATEADD(YEAR, -1, GETDATE())
GROUP BY c.DonorID, c.FirstName, c.LastName
HAVING SUM(p.TotalAmount) > 200;



--8. Calculate the average loyalty score of donors who are active volunteers
SELECT
	AVG(LoyaltyScore) AS AvgLoyaltyScore
FROM CRM_Dataset
WHERE Volunteer = 1;



--9. Rank donors by total event participation and donations
SELECT
	DonorID,
	FirstName,
	LastName,
	EventParticipationCount,
	DonationAmount,
	RANK() OVER (ORDER BY EventParticipationCount DESC, DonationAmount DESC) AS Rank
FROM CRM_Dataset;



--10. Find the correlation between event participation and donations

--Calculate Covariance, Expected Values and Correlation Factors
SELECT
	SUM(EventParticipationCount * DonationAmount) AS Covariance,
	SUM(EventParticipationCount) AS SumEvents,
	SUM(DonationAmount) AS SumDonations,
	COUNT(*) AS Count,
	(SUM(EventParticipationCount) * SUM(DonationAmount)) / COUNT(*) AS ExpectedProduct
FROM CRM_Dataset;



--11. Identify donors who have opted in for communication and placed orders
SELECT
	c.FirstName,
	c.LastName,
	c.Email,
	p.Product,
	p.Quantity,
	p.TotalAmount
FROM CRM_Dataset c
JOIN ProductOrders p ON c.DonorID = p.DonorID
WHERE c.CommunicationOptIn = 1;



--12. Find the top 3 donors for each region by total donations
WITH RankedDonors AS(
	SELECT
		DonorID,
		FirstName,
		LastName,
		Region,
		SUM(DonationAmount) AS TotalDonations,
		RANK() OVER (PARTITION BY Region ORDER BY SUM(DonationAmount) DESC) AS Rank
	FROM CRM_Dataset
	GROUP BY DonorID, FirstName, LastName, Region
)
SELECT
	DonorID,
	FirstName,
	LastName,
	Region,
	TotalDonations
FROM RankedDonors
WHERE Rank <=3;



--13. Generate a summary report of product orders by age group
SELECT
	c.AgeGroup,
	COUNT(DISTINCT p.OrderID) AS TotalOrders,
	SUM(p.Quantity) AS TotalItemsOrdered,
	SUM(p.TotalAmount) AS TotalRevenue
FROM CRM_Dataset c
JOIN ProductOrders p ON c.DonorID = p.DonorID
GROUP BY c.AgeGroup
ORDER BY TotalRevenue DESC;



--14. Analyze donation trends over time
SELECT
	YEAR(LastDonationDate) AS DonationYear,
	MONTH(LastDonationDate) AS DonationMonth,
	SUM(DonationAmount) AS TotalDonations
FROM CRM_Dataset
GROUP BY YEAR(LastDonationDate), MONTH(LastDonationDate)
ORDER BY DonationYear, DonationMonth;
